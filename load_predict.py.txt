from django.shortcuts import render
from django.http import JsonResponse
from sklearn.feature_extraction.text import TfidfVectorizer
import pickle
from sklearn.feature_extraction.text import TfidfTransformer
from gensim import utils
import gensim.parsing.preprocessing as gsp
from sklearn import preprocessing
import logging

loaded_model = pickle.load(open("news_classifier.pkl", 'rb'))
loaded_vocab = pickle.load(open("vocab_news_classifier.pkl", 'rb'))
le = preprocessing.LabelEncoder()
labls = ['business', 'entertainment', 'politics', 'sport', 'tech']
le.fit(labls)


def CleanInput(input_text):
    filters = [
        gsp.strip_tags,
        gsp.strip_punctuation,
        gsp.strip_multiple_whitespaces,
        gsp.strip_numeric,
        gsp.remove_stopwords,
        gsp.strip_short,
        gsp.stem_text
    ]

    def clean_text(s):
        s = s.lower()
        s = utils.to_unicode(s)
        for f in filters:
            s = f(s)
        return s
    res = clean_text(input_text)
    return res


def pred(text):
    examples = [text]
    count_vect = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), max_features=50000, max_df=0.5,
                                 use_idf=True, norm='l2', vocabulary=loaded_vocab)
    tfidf_transformer = TfidfTransformer()
    x_count = count_vect.fit_transform(examples)
    predicted = loaded_model.predict(x_count)
    result_category = predicted[0]
    final_pred = le.inverse_transform([result_category])
    return final_pred


def index(request):
    if request.method == 'POST':
        input_text = request.POST['input_text']
        filtered_input = CleanInput(input_text)
        predictions = pred(filtered_input)
        logging.info("Predicted Label for " + input_text + " Label is" + str(predictions))
        return JsonResponse({"Predicted Label": predictions[0]})
    return render(request, 'index.html')



from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]